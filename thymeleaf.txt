- th:each="i : ${#numbers.sequence(1, 5, [step])}"

- th:object="${member}"  ->  th:text="*{name}"  ( <-원래 ${member.name} )

- <p th:text="${member}"></p> == <p>[[${member}]]</p> 또는 [[${member}]] 태그 없이도 사용 가능

- th:href="@{}" 라는 thymeleaf를 이용한 쿼리스트링 작성법 (${key} == 제목, ${query} == 검색어 라는 가정하에)
  1) th:href="@{/board(key=${key}, query=${query})}"  ==  localhost/board?key=제목&query=검색어

- @PathVariable을 사용시 html 태그 안 th:href 구문 작성법 (boardNo 값은 10이라는 가정하에)
  1) th:href="@{/example/ex3/{number}(number=${boardNo})}"  ==  localhost/example/ex3/10
  2) controller에서 GetMapping("example/ex3/{number}") 이라 작성 후 매개변수 공간에 @PathVariable("number") int number 작성
    @PathVariable의 기본 scope은 request scope임. 

- thymeleaf 조건문
  1) th:if="${member == null}"  ==  member가 널이면 해당 태그를 출력
  2) th:if="${member}"  ==  member의 값이 없으면 true, 없으면 false 반환 (true일 때 해당 태그 출력)
  3) th:unless="${member == null}"  == ${member != null} 과 같은 의미
  4) th:switch="${num}"  ->  주로 <th:block></th:block> 태그 안에 사용됨  (${num} == 100이라는 가정하에)
    (1) <p th:case="100">num의 값은 : 100</p>  해당 태그 출력
    (2) <p th:case="200">num의 값은 : 200</p>  해당 태그 출력 안 함
    (3) <p th:case="*">나머지~</p>  == case문에 작성되어 있지 않은 모든 조건일 경우 이 태그 출력

- 삼항 연산자
  1) <p th:text="${num == 100} ? '100 맞음' : '100 아님'"></p>

- Elvis 연산자 : 조건식 자리에 값이 있으면 값 출력, 없으면 우변에 있는 문자열 출력
  1) <p th:text="${num} ?: '100 있음'"></p>

- No-Operation 연산자 : 조건식의 값이 있으면 값 출력, 없으면 해당 태그 내용 출력
  1) <p th:text="${num} ?: _">숫자 없음</p>

- th:classappend : 태그 요소에 class 속성 값을 동적으로 추가
  1) <p th:classappend="red">빨간색</p>  ->  style 태그나 해당 html 파일과 연결 되어있는 css 파일에 .red에 대한 정의가 해당 p태그 속성에도 적용됨
  2) <p th:classappend="${num gt 100} ? green : red">num이 100보다 크면 green, 아니면 red class 속성 추가</p>
  3) class가 있는 상태서 th:classappend 로 새로운 class 추가시 기존에 있던 class를 덮어쒸워버림

- 안전 탐색 연산자 : 객체가 null 일 경우 오류 발생이지만 안전 탐색 연산자를 이용하면 오류 발생 없음
  1) <p th:texxt="${member}"></p>  ==  ${member} 가 null 이면 아무런 출력 없이 페이지 로드함(원래는 오류 발생으로 페이지 로드 안됨)

- JS Inline - Natural Template
  1) 스크립트 태그 내부에서 thymeleaf의 변수, 연산을 사용할 수 있게함
  2) const member = /*[[${member}]]*/ "message값";  
     -> 우변에 문자열 추가하는 이유는 좌변 값만 입력하면 값 대입이 되지 않음








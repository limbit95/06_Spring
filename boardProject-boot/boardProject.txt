1. 프로젝트 생성 후 DB 연결 정보 작성하지 않고 바로 서버 구동 하고 싶을 때는 DB 관련 라이브러리 주석처리 후 build.gradle refresh 한 후에 서버 띄워야 서버가 돌아감

2. BoardProjectBootApplication 클래스 내부 클래스이름 위에 @SpringBootApplication(exclude = {SecurityAutoConfiguration.class}) 추가
 - spring Security에서 기본 제공하는 로그인 페이지 이용 안하겠다라는 구문

3. 쿠키와 세션
쿠키 : 클라이언트 관리
세션 : 서버에서 관리

4. application.properties 파일에 server.servlet.session.tracking-modes=cookie 추가
 - url에 jsessionId가 보여질 때 jsessionId를 쿠키에 담으라는 설정값임
 - 웹에서 jsessionId 확인하기 - 크롬 기준 - F12 누르기 - 상단 탭 중 Application 클릭 - Storage에서 Cookies 클릭 - 안의 url 클릭 - 오른쪽에서 jsessionId 확인 가능

5. 파일 업로드
 - 클라이언트가 올린 파일 이름을 서버에서 한 번 rename 함 (올린 날짜 등, 추가(녹화본 보고 적기))
 - <input type="file" name="uploadFile" multiple>
    - name 속성값 필수임 (Controller에서 값을 받기 위해서 필요함)
    - multiple 속성 추가시 파일 여러 개 선택하여 업로드 가능(속성 없을 때 파일 하나만 업로드 가능)
 - 파일 업로드시 Text 값이 아닌 File 객체로 값이 보내짐
 - 파일 업로드 시에는 input 태그를 감싸고 있는 form 태그의 enctype 속성의 값은 multipart/form-data 으로 지정해주어야 함
    - multipart/form-data
     1) 무조건 POST에서만 동작함 (Get으로도 동작은 하나 무조건 Post 권장)
     2) 제출되는 여러 데이터 타입에 맞춰서 인코딩하여 제출
     3) 문자열 -> String / 숫자 -> String -> int/double(Spring 이 처리) / File -> 2진 데이터
 - Controller의 메서드에서 @RequestParam 으로 받을 때 담을 자료형은 MultipartFile로 받아주어야 함 
    - (@RequestParam("uploadFile)") MultipartFile uploadFile)
    - MultipartResolver의 기능임(FileConfig 에서 설정 기능)
    - 업로드한 파일 + 파일에 대한 내용 및 설정 내용 포함되어 있음
 - 파일 업로드 -> 메모리에 올라감(지정한 파일크기 내 일 경우) -> 파일 크기가 50MB(지정 설정한 파일 크기) 초과 시 
    -> 파일 임시 저장 경로에 저장(config.properties에서 spring.servlet.multipart.location=설정한 경로)

6. Filter : 클라이언트가 서버에 요청하기 전에 동작 
 - Servlet 스펙에서 제공하는 기능
 - 요청, 응답 시 걸러내거나 추가할 수 있는 객체
 - 요청 주소를 필터가 가로챌 수 있음
   ex) /myPage/* 주소 요청을 가로챔 -> loginMember 세션이 없으면 해당 주소 요청을 할 수 없게끔 만든다

7. interceptor : Handler Mapping, Controller, View Resolver와 서버 사이에서 이루어짐
 - Spring에서 제공하는 기능
 - 가로채는 것 + 추가










